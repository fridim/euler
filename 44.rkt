#lang racket/base

#| Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is the
value of D? |#


; resolving 3n² - n - 2Pn = 0   (discriminant...)
; (1 + sqrt(1 + 24Pn))/6 has to be an integer
(define (pentagonal? p)
  (integer? (/ (+ 1 (sqrt (+ 1 (* 24 p)))) 6)))

(require rackunit)

(check-true (pentagonal? 1))
(check-true (pentagonal? 5))
(check-true (pentagonal? 12))
(check-true (pentagonal? 22))
(check-true (pentagonal? 35))
(check-true (pentagonal? 51))
(check-true (pentagonal? 70))
(check-true (pentagonal? 92))
(check-true (pentagonal? 117))
(check-true (pentagonal? 145))
(check-false (pentagonal? 2))
(check-false (pentagonal? 143))

(define (pentagonal-list limit)
  (for/list ([i (in-range 1 (add1 limit))])
            (/ (* i (- (* 3 i) 1)) 2)))

(define (euler44 limit)
  (let ((ls (pentagonal-list limit)))
    (for*/first ([i (in-list ls)]
                 [pos-i (in-value (/ (+ 1 (sqrt (+ 1 (* 24 i)))) 6))]
                 [j (in-list (list-tail ls (- limit pos-i)))]
                 #:when (and (pentagonal? (+ i j))
                             (pentagonal? (- j i))))
                (- j i))))

(time (euler44 2500)) ; 200ms
