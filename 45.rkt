#lang racket/base

#| Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal. |#

;; t = 1/2 * n * (n + 1)
;; t = 1/2 * n^2 + n / 2
;; t = (n ^ 2 + n) / 2
;; 2t = n^2 + n
;; n^2 + n - 2t = 0
;; => discriminant and root to find the inverse function :
;; n = (Sqr(1 + 8t) - 1) / 2
(define (triangle? t)
  (integer? (/ (- (sqrt (+ 1 (* 8 t))) 1) 2)))

; resolving 3n² - n - 2Pn = 0   (discriminant...)
; (1 + sqrt(1 + 24Pn))/6 has to be an integer
(define (pentagonal? p)
  (integer? (/ (+ 1 (sqrt (+ 1 (* 24 p)))) 6)))


(time (let loop ([i 144])
        (let ((hi (* i (- (* 2 i) 1))))
          (if (and (triangle? hi)
                   (pentagonal? hi))
            hi
            (loop (add1 i)))))) ; 40ms
